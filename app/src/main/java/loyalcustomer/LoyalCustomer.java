/*
 * This source file was generated by the Gradle 'init' task
 */
package loyalcustomer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * This class is used to gather a list of customers and determine if there are
 * any loyal customers. A loyal customer is a person that has visited the web
 * site across two days and also visited more than one page on the web site.
 * The class provides a method ({@link #getLoyalCustomersList }) to get a list
 * of loyal customer IDs. It also
 * provides a method ({@link #generateReport }) to produce a report given the
 * list of loyal customer IDs
 * and a file path to put it in. Each log in the log file should represent each
 * time a customer visits one of the web site's pages. The log files that are
 * associated to this class should be of the following formate for each log
 * in the file:
 * <p>
 * [MM/DD/YYYY] [HH:mm:ss];[Customer ID Integer];[Page ID Integer of the page
 * visited]
 */
public class LoyalCustomer {

    // Create a logger to display errors, warning, and other messages to the
    // console when needed.
    private static final Logger LOGGER = LogManager.getLogger();

    // This map is used to associate a customer ID to its Customer object.
    Map<Integer, Customer> customerList = new HashMap<>();

    /**
     * This method is used to take in the args from the main method with an
     * address attached to the args and produce a list of loyal customre Ids.
     * 
     * @param args - This is the arguments that are passed in from the main method.
     *             It should contain the path for the folder containing the log
     *             files that will be searched.
     * @return - This method returns a list of customer IDs that are integers.
     */
    public List<Integer> getLoyalCustomersList(String[] args) {
        // The list of files in the folder provided by the path in the args.
        List<File> fileLIst;

        // This line uses the extractFilesFromArgs method to pull the files
        // from the folder that is provided in the path in the args.
        fileLIst = extractFilesFromArgs(args);

        // Loop throug the files from the log folder and process each log.
        for (File nextFile : fileLIst) {

            // Check if the log file has anything in it.
            if (nextFile.length() > 0) {

                // Take the individual log and process it using the
                // extractAndProcessLog method.
                extractAndProcessLog(nextFile);

            }
        }

        // Create a list of integers that will hold the loyal customer IDs.
        List<Integer> loyalCustomerList;

        // Get the loyal customer IDs using the getLoyalCustomer method and
        // store them in the loyalCustomerList variable.
        loyalCustomerList = getLoyalCustomers(customerList);

        // Return the loyal customer ID list.
        return loyalCustomerList;
    }

    /**
     * This method is used to generate a report that contains a list of loyal
     * customers. This report is stored under the name provided and in the path
     * provided.
     * 
     * @param loyalCustomerIds - This is the list of loyal customer IDs that can
     *                         be pulled using the {@link #getLoyalCustomersList}
     *                         method.
     * @param fileName         - This is the name and extension of the file that
     *                         will
     *                         hold the loyal customer ID report.
     * @param path             - THis is the path to the folder that will hold the
     *                         report.
     */
    public void generateReport(List<Integer> loyalCustomerIds, String fileName, String path) {
        // Create the file path to create the report in. Use the fileName parameter with
        // the path to create the full file path.
        String filePath = path + File.separator + fileName;

        // Create a file for the folder location provided.
        File file = new File(path);

        // If the folder location doesn't exists, create it.
        if (!file.exists()) {
            try {
                Files.createDirectories(Paths.get(path));
            } catch (IOException ioe) {
                LOGGER.error("There was an issue creating the report folder.");
                System.exit(1);
            }
        }

        // Try to create a BufferedWriter using a FileWriter to write the report.
        // Use the filePath to create the FileWriter.
        try (FileWriter fileWriter = new FileWriter(filePath);
                BufferedWriter writer = new BufferedWriter(fileWriter)) {

            // Write a header for the report.
            writer.write("Here are the customer IDs of the loyal customers:\n\n");

            // Iterate through the loyal customer list and write out each loyal
            // customer ID in the report.
            for (Integer nextCustomerID : loyalCustomerIds) {
                writer.write(String.format("Customer: %d%n", nextCustomerID));
            }

        } catch (IOException ioe) {
            // If there is an issue with writing the file print message to the console
            // and end program.
            LOGGER.error("There was an issue with writing the report file.");
            System.exit(1);
        }
    }

    /**
     * This method is used to pull a list of files from the path provided by the
     * args.
     * 
     * @param args - This is the array of args retrieved from the main method. It
     *             should
     *             contain a path to the folder where the log files are located.
     * @return - A list of files that are located in the folder provided by the path
     *         from
     *         the args.
     */
    private List<File> extractFilesFromArgs(String[] args) {
        // Get the folder path from the args array.
        String folderPath = args[0];

        // Create a file for the folder path.
        File folder = new File(folderPath);

        // If the folder doesn't exists or is not a directory, display the error
        // to the console and end the program.
        if (!folder.exists() || !folder.isDirectory()) {
            String errorString = String.format("Invalid folder path: %s", folderPath);
            LOGGER.error(errorString);
            System.exit(1);
        }

        // Create an array to hold the list of files from the folder provided.
        // Pull a list of files in the folder provided and add them to the list.
        List<File> files = Arrays.asList(folder.listFiles());

        // If the list of files is empty then display an error message to the console
        // and end the program.
        if (files == null) {
            String errorString = String.format("Error extracting files in folder: %s", folderPath);
            LOGGER.error(errorString);
            System.exit(1);
        }

        // Return the list of files extracted from the folder provided.
        return files;
    }

    /**
     * This method is used to take a log file and pull each log from the file
     * line by line. For each log it processes each log using the
     * {@link #processLog } method.
     * 
     * @param logFile - This is the file that contains the logs to be processed.
     */
    private void extractAndProcessLog(File logFile) {
        // Create a BufferedReader using a FileReader with the log file provided.
        try (FileReader fileReader = new FileReader(logFile);
                BufferedReader reader = new BufferedReader(fileReader)) {

            // Create a string to hold the next line.
            String line;

            // Pull each line in the file and send it to the processLog method.
            while ((line = reader.readLine()) != null) {
                processLog(line);
            }

        } catch (IOException ioe) {
            // If there is an issue with reading the log file, display the message to the
            // console
            // and end the program.
            String errorString = String.format("There was an issue with reading the log file: %s", logFile.getName());
            LOGGER.error(errorString);
            System.exit(1);
        }
    }

    /**
     * This method is used to parse each line of the log file. To make this method
     * work the line in
     * the file has to have the format below:
     * <p>
     * [MM/DD/YYYY] [HH:mm:ss];[Customer ID Integer];[Page ID Integer of the page
     * visited]
     * 
     * @param log - This is the log line extracted from the log file.
     */
    private void processLog(String log) {
        // Split the log line by the ";" character and store the array.
        String[] splitLog = log.split(";");

        // From the split array pull the date and time in the first position of the
        // array.
        String dateTimeStamp = splitLog[0];

        // Split the date and time by the space in between the date and time and store
        // it in an array.
        String[] dateTimeSplit = dateTimeStamp.split(" ");

        // Pull the date from the date and time array.
        String date = dateTimeSplit[0];

        // Create a variable to hold the customer ID from the log.
        Integer customerId = -1;

        // Create a variable to hold the page ID that was visited from the log.
        Integer pageId = -1;

        // Attempt to cast the customer ID string into an integer.
        try {
            customerId = Integer.parseInt(splitLog[1]);
        } catch (NumberFormatException nfe) {
            // If the cast fails, display the error to the console and end the program.
            LOGGER.error("One of the customer ids was not in the proper format.");
            System.exit(1);
        }

        // Attempt to cast the page ID string into an integer.
        try {
            pageId = Integer.parseInt(splitLog[2]);
        } catch (NumberFormatException nfe) {
            // If the cast fails, display the error to the console and end the program.
            LOGGER.error("One of the page ids was not in the proper format.");
            System.exit(1);
        }

        // Create a variable to hold the customer associated to the customer ID from the
        // log.
        Customer customer = null;

        // Check if the customer ID from the log is viable and if the customer list
        // contains
        // that customer ID.
        if (customerId > 0 && customerList.containsKey(customerId)) {
            // Get the customer from the customer list and attach it to the customer
            // variable.
            customer = customerList.get(customerId);

            // IF the customer list doesn't contain the customer ID, check if the customer
            // ID if viable.
        } else if (customerId > 0) {
            // Create a new Customer, attach the customer ID to it, and put it in the
            // customer list.
            customer = new Customer(customerId);
            customerList.put(customerId, customer);
        } else {
            // The log contains an non-viable customer ID, so display an error message to
            // the
            // console and end the program.
            LOGGER.error("One of the log's customer Id is the wrong format.");
            System.exit(1);
        }

        // Check if the customer was created.
        if (customer != null) {

            // Add the date visited to the customer.
            customer.getDatesVisited().add(date);

            // Add the page visited to the customer.
            customer.getPagesVisited().add(pageId);
        }
    }

    /**
     * This method takes a map that contains the customer IDs and customers
     * associated to those IDs
     * and checks if there are any loyal customers in the list. To check if the
     * customer is loyal,
     * it checks if the customer visited the web site across two days and the
     * customer visited more
     * than one page in the web site.
     * 
     * @param customerList - This is the map containing customer IDs and the
     *                     customer associated to
     *                     that ID.
     * @return A list of customer IDs that are associated to loyal customers.
     */
    private List<Integer> getLoyalCustomers(Map<Integer, Customer> customerList) {

        // Create an array to hold the loyal customer IDs.
        ArrayList<Integer> loyalCustomers = new ArrayList<>();

        // Iterate through the map and check if the customer is loyal or not.
        for (Map.Entry<Integer, Customer> nextCustomerMap : customerList.entrySet()) {

            // Pull the customer from the current customer ID in the map.
            Customer nextCustomer = nextCustomerMap.getValue();

            // Check if the customer has visited both days and if the customer has visited
            // more than
            // one web page.
            if (nextCustomer.getDatesVisited().size() > 1 && nextCustomer.getPagesVisited().size() > 1) {
                // If loyal add the customer ID to the list.
                loyalCustomers.add(nextCustomer.getCustomerID());
            }
        }

        // Return the list of loyal customer's IDs.
        return loyalCustomers;
    }

}
